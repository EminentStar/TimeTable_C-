1. get, set 메서드 c#식으로 전부 변경

public string GetUser_id(){
	return user_id;
}
public void SetUser_id(string paramUser_id)
{
	user_id = paramUser_id;
}

=>


public int User_id
        {
            get { return user_id; }
            set { user_id = value; }
        }


*Refactoring : 리팩토링은 겉으로 드러나는 코드의 기능은 바꾸지 않으면서 내부 구조를 개선하는 방식으로 소프트웨어 시스템을 수정하는 과정이다. 버그가 생길 가능성을 최소화하며 코드를 정리하는 정제된 방법이다.
			   코드를 작성하고 난 뒤 설계를 향상시키는 일이다.


2.매개변수 세트를 객체로 전환 (p351)
여러 개의 매개변수가 항상 붙어 다닐 땐 그 매개변수들을 객체로 바꾸자.


*조건문 쪼개기 (Decompose Conditional)
복잡한 조건문(if-then-else)이 있을 땐, if, then, else 부분을 각각 메서드로 빼내자.
-조건이 눈에 잘 ㄷ르어오고 갈라지는 로직 흐름을 알아보기 쉽다. 게다가 왜 그렇게 갈라놨는지도 확실히 알 수 있다.

방법 : 1. if절을 별도의 메서드로 빼내자. 2.then 절고 else 절을 각각의 메서드로 빼내자.

ex)if(data.before(SUMMER_START) || date.after(SUMMER_END))
		charge = quantity * winterRate + _winterServiceCharge;
   else charge = quantity * _summerRate;

=> 
	if(notSummer(date))
		charge = winterCharge(quantity);
	else charge = summerCharge (quantity);


3.매개변수 세트를 객체로 전환
여러 개의 매개변수가 항상 붙어 다닐 땐 그 매개변수들을 객체로 바꾸자.

-대체할 매개변수 그룹에 해당하는 새 클래스를 작성하고, 그 클래스를 변경불가로 만들자.
-변경불가 방법을 사용하면 강종 별칭 버그 aliasing bugs가 방지되어 좋다.
-새 데이터 뭉치에 매개변수 추가를 적용하자. 새 매개변수에 기본 값을 사용하자.

4.클래스 추출
두 클래스가 처리해야 할 기능이 하나의 클래스에 들어 있을 땐
 새 클래스를 만들고 기존 클래스의 관련 필드와 메서드를 새 클래스로 옮기자.

 5.Magic Number 대신 Named Constant 사용
 코드에서 어떻게 처리되고 있는지 알아내기 힘들다.
 상수를 사용하면 단점이나 부작용 없이 성능이 향상되며 가독성이 엄청나게 향상된다.

 6.메서드명 변경
 메서드명을 봐도 기능을 알 수 없을 땐 메서드명을 직관적인 이름으로 바꾸자.
 (메서드명만 봐도 그 메서드의 의도를 한눈에 알 수 있어야 한다.)



